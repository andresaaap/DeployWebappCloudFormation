Description:
    Alvaro Andres Pinzon Cortes - Udacity. 
    This template deploysa VPC, with a pair of public and private subnets accroos two availability zones. 
    It deploys an internet gateway, with route on the public subnets. It deploys a pair of NAT gateway, with routes to the private subnets.
    It also has an autoscale group, a load balancer and 2 servers per private subnet

Parameters:
    EnvironmentName:
        Description: An environment name that wull be prefixed to the resources
        Type: String
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this private subnet
        Type: String
    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this private subnet
        Type: String
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this public subnet
        Type: String
    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this public subnet
        Type: String

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties: 
            Tags: 
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties: 
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone: !Select [0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
            VpcId: !Ref VPC

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone: !Select [1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone: !Select [0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
            VpcId: !Ref VPC

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone: !Select [1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
            VpcId: !Ref VPC

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt ElasticIP1.AllocationId
            SubnetId: !Ref PublicSubnet1
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} NatGateway Public subnet 1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt ElasticIP2.AllocationId
            SubnetId: !Ref PublicSubnet2
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} NatGateway Public subnet 2

    ElasticIP1:
        Type: AWS::EC2::EIP
        Properties: 
            Domain: vpc
        DependsOn: VPC

    ElasticIP2:
        Type: AWS::EC2::EIP
        Properties: 
            Domain: vpc
        DependsOn: VPC

    TablePrivateSubnet1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} route table private subnet 1

    Route1TablePrivateSubnet1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref TablePrivateSubnet1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    RouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties: 
            RouteTableId: !Ref TablePrivateSubnet1
            SubnetId: !Ref PrivateSubnet1

    TablePrivateSubnet2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} route table private subnet 2

    Route1TablePrivateSubnet2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref TablePrivateSubnet2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    RouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties: 
            RouteTableId: !Ref TablePrivateSubnet2
            SubnetId: !Ref PrivateSubnet2

    TablePublicSubnet1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} route table public subnet 1

    Route1TablePublicSubnet1:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref TablePublicSubnet1
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    RouteTableAssociation3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties: 
            RouteTableId: !Ref TablePublicSubnet1
            SubnetId: !Ref PublicSubnet1

    TablePublicSubnet2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} route table public subnet 2

    Route1TablePublicSubnet2:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref TablePublicSubnet2
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    RouteTableAssociation4:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties: 
            RouteTableId: !Ref TablePublicSubnet2
            SubnetId: !Ref PublicSubnet2
